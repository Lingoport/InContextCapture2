/*
 * Copyright 2010-2024 Gildas Lormeau
 * contact : gildas.lormeau <at> gmail.com
 * author: gildas.lormeau <at> gmail.com
 * author: dcardin2007 <at> gmail.com
 *
 * This file is part of SingleFile.
 *
 *   The code in this file is free software: you can redistribute it and/or
 *   modify it under the terms of the GNU Affero General Public License
 *   (GNU AGPL) as published by the Free Software Foundation, either version 3
 *   of the License, or (at your option) any later version.
 *
 *   The code in this file is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
 *   General Public License for more details.
 *
 *   As additional permission under GNU AGPL version 3 section 7, you may
 *   distribute UNMODIFIED VERSIONS OF THIS file without the copy of the GNU
 *   AGPL normally required by section 4, provided you include this license
 *   notice and a URL through which recipients can access the Corresponding
 *   Source.
 */

/* global fetch, Blob, AbortController, FormData */

const AUTHORIZATION_HEADER = "Authorization";
const BEARER_PREFIX_AUTHORIZATION = "Bearer ";
const ACCEPT_HEADER = "Accept";
const CONTENT_TYPE = "application/json";

export { RestFormApi };

class RestFormApi {
	constructor(token, restApiUrl, fileFieldName, urlFieldName) {

	}

	async upload(filename, content, url) {
	this.controller = new AbortController();
	console.log("aaaaaaaaaaa")
	const serverURL = "https://fs-incontext.lingoport.io/incontext-server/";
	const email = "dev@lingoport.com"; // TODO: replace with real variable later
	const serverToken = "8T7Dg1Bp7Jj561SfABxI4U0lu3SSVMGT";        // TODO: replace with real variable later

	// Build content (this replaces your serialize logic)
	//const docTypeString = "<!DOCTYPE html>\n";
	//const content = docTypeString + document.documentElement.outerHTML;

	// Simple LRM key check
//	if (!content.includes("Page generated by Lingoport Incontext")) {
//		console.warn("This page doesn't contain a valid LRM key");
//		return null;
//	}

//	const blob = new Blob([content], { type: "text/html" });
	const blob = content instanceof Blob ? content : new Blob([content], { type: "text/html" });

	const formData = new FormData();
	formData.append("theFile", blob, "InContext.html");
	formData.append("theToken", serverToken);
	formData.append("theEmail", email);

	try {
		const response = await fetch(serverURL + "document/upload", {
			method: "POST",
			body: formData
		});
		const body1 = await response.text(); // always read body first
		console.log("Response body:", body1);
		if ([200, 201].includes(response.status)) {
			return body1;
		} else {
			throw new Error(body1);
		}
	}
}
	abort() {
		if (this.controller) {
			this.controller.abort();
		}
	}
}
